AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Infraestructura para frontend estático con S3 y CloudFront


Resources:


  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "frontend-static-${AWS::StackName}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  FrontendOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        Description: Access control for private S3 origin
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4


   
  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: frontendS3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig: {}  # Usamos S3OriginConfig vacío para forzar el uso de OAC
            OriginAccessControlId: !Ref FrontendOAC
        DefaultCacheBehavior:
          TargetOriginId: frontendS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          CloudFrontDefaultCertificate: true


  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${FrontendDistribution}"
  UploadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Uploadstable-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: filename
          AttributeType: S
      KeySchema:
        - AttributeName: filename
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyPrivateVPC


  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: MyPrivateSubnet


  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC


  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref RouteTable


  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso para la Lambda
      VpcId: !Ref MyVPC



  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'uploads-bucket-${AWS::StackName}-${AWS::Region}'


  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "UploadFileFunction-${AWS::StackName}"
      Handler: app.lambda_handler
      Runtime: python3.10
      CodeUri: backend/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
          TABLE_NAME: !Ref UploadsTable
      Policies:
        - S3WritePolicy:
            BucketName: !Ref UploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref UploadsTable
      Events:
        UploadEndpoint:
          Type: Api
          Properties:
            Path: /upload
            Method: post





Outputs:
  FrontendURL:
    Description: "URL pública del frontend"
    Value: !Sub "https://${FrontendDistribution.DomainName}"